import streamlit as st              #Interactivity
import pandas as pd                 #For data management
import matplotlib.pyplot as plt     #Data vissualization
import seaborn as sns               #data visualization

# Initialize the expense dataframe
if 'expenses' not in st.session_state:
    st.session_state.expenses = pd.DataFrame(columns=['Date', 'Category', 'Amount', 'Description'])

# Function to apply light theme styles
def apply_light_theme():
    st.markdown("""
        <style>
        .reportview-container {
            background: white;
            color: black;
        }
        /* Style for buttons */
        .stButton {
            padding: 5px 10px;  /* Adjust the padding */
            font-size: 12px;  /* Adjust the font size */
        }
        .subheader{
            font-size: 12px;
        }
        *title {
            color: #F0F8FF; 
            font-size: 2.5em;
            font-weight: bold;
    }
        </style>
        """, unsafe_allow_html=True)

# Apply the light theme
apply_light_theme()

def add_expense(date, category, amount, description):
    new_expense = pd.DataFrame([[date, category, amount, description]], columns=st.session_state.expenses.columns)
    st.session_state.expenses = pd.concat([st.session_state.expenses, new_expense], ignore_index=True)

def load_expenses():
    uploaded_file = st.file_uploader("Upload a CSV file", type=['csv'])
    if uploaded_file is not None:
        st.session_state.expenses = pd.read_csv(uploaded_file)
        
        # Attempt to parse dates with coercion for error handling
        st.session_state.expenses['Date'] = pd.to_datetime(st.session_state.expenses['Date'], errors='coerce', dayfirst=True)
        
        if st.session_state.expenses['Date'].isnull().any():
            st.warning("Some dates could not be parsed. Check the date format in your CSV file.")
        
        st.success("Dataset loaded successfully!")
        
        st.subheader("Imported Expenses Data")
        st.write(st.session_state.expenses)

def save_expenses():
    st.session_state.expenses.to_csv('expenses.csv', index=False)
    st.success("Expenses saved successfully!")

def visualize_expenses():
    if not st.session_state.expenses.empty:
        fig, ax = plt.subplots(figsize=(14, 7)) #Create's subplots of the size provided in figsize
        
        daily_expenses = st.session_state.expenses.groupby('Date')['Amount'].sum().reset_index()
        sns.lineplot(data=daily_expenses, x='Date', y='Amount', ax=ax, color='orange', marker='o')
        
        ax.set_title("Daily Expenses Over Time", fontsize=18)
        ax.set_xlabel("Date", fontsize=14)
        ax.set_ylabel("Amount Spent", fontsize=14)
        ax.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45)
        
        st.pyplot(fig)
    else:
        st.warning("No expenses to visualize!")

def visualize_expenses_by_category():
    if not st.session_state.expenses.empty:
        fig, ax = plt.subplots(figsize=(14, 7))
        
        category_expenses = st.session_state.expenses.groupby('Category')['Amount'].sum().reset_index()
        sns.barplot(data=category_expenses, x='Category', y='Amount', ax=ax, palette='Set2')
        
        ax.set_title("Total Amount Spent by Category", fontsize=18)
        ax.set_xlabel("Category", fontsize=14)
        ax.set_ylabel("Amount Spent", fontsize=14)
        plt.xticks(rotation=45)
        
        st.pyplot(fig)
    else:
        st.warning("No expenses to visualize!")

def search_expenses(query):
    if query:
        filtered_expenses = st.session_state.expenses[st.session_state.expenses['Description'].str.contains(query, case=False)]
        st.write(filtered_expenses)
    else:
        st.write(st.session_state.expenses)

def expense_summary():
    if not st.session_state.expenses.empty:
        total_expenses = st.session_state.expenses['Amount'].sum()
        average_expenses = st.session_state.expenses['Amount'].mean()
        
        st.subheader("Expense Summary")
        st.write(f"Total Expenses: ${total_expenses:.2f}")
        st.write(f"Average Expense: ${average_expenses:.2f}")
        
        category_summary = st.session_state.expenses.groupby('Category')['Amount'].sum().reset_index()
        category_summary['Percentage'] = (category_summary['Amount'] / total_expenses) * 100
        
        fig, ax = plt.subplots(figsize=(10, 7))
        sns.barplot(data=category_summary, x='Category', y='Percentage', ax=ax, palette='Set1')
        
        ax.set_title("Percentage of Spending per Category", fontsize=18)
        ax.set_xlabel("Category", fontsize=14)
        ax.set_ylabel("Percentage of Total Expenses", fontsize=14)
        plt.xticks(rotation=45)
        
        st.pyplot(fig)
    else:
        st.warning("No expenses to summarize!")

# Main app structure
st.title('Expense Pilot')
st.caption('Keep track of your daily expenses')

with st.sidebar:
    st.subheader('Add Expense')
    date = st.date_input('Date')
    category = st.selectbox('Category', ['Food', 'Transport', 'Entertainment', 'Fitness', 'Clothing', 'Savings', 'Medical', 'Other'])
    amount = st.number_input('Amount', min_value=0.0, format="%.2f")
    description = st.text_input('Description')
    
    if st.button('Add'):
        add_expense(date, category, amount, description)
        st.success('Expense added!')

    st.subheader('File Operations')
    if st.button('Save Expenses'):
        save_expenses()
    
    load_expenses()

st.subheader('Expenses')
st.caption('Current Expense Data')
st.write(st.session_state.expenses)

# Search functionality
st.subheader('Search Expenses')
search_query = st.text_input("Search by Description")
if st.button('Search'):
    search_expenses(search_query)

st.subheader('Visualization')
col1, col2 = st.columns(2)  # Create two columns

with col1:
    if st.button('Visualize Imported Expenses'):
        visualize_expenses()

with col2:
    if st.button('Visualize Expenses by Category'):
        visualize_expenses_by_category()

st.subheader('Expense Summary')
if st.button('Show Expense Summary'):
    expense_summary()
